<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-27T22:47:34+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HaSuNoの備忘録</title><subtitle>私の個人的な備忘録とブログです。</subtitle><entry><title type="html">1次元イジングモデルの厳密解(2)-帰納法-</title><link href="http://localhost:4000/physics/2025/05/27/1D_Ising_2.html" rel="alternate" type="text/html" title="1次元イジングモデルの厳密解(2)-帰納法-" /><published>2025-05-27T21:30:00+09:00</published><updated>2025-05-27T21:30:00+09:00</updated><id>http://localhost:4000/physics/2025/05/27/1D_Ising_2</id><content type="html" xml:base="http://localhost:4000/physics/2025/05/27/1D_Ising_2.html"><![CDATA[<p>一次元イジングモデルでは、スピン変数 \( s_i = \pm 1 \) が一次元鎖状に並び、隣接スピン間に相互作用がある系を考える。ここでは、周期境界条件ではなく、<strong>開境界条件</strong>を仮定し、分配関数 \( Z_N \) を<strong>帰納的（再帰的）に構築する方法</strong>を紹介する。</p>

<h2 id="モデルとハミルトニアン">モデルとハミルトニアン</h2>

<p>考えるモデルのハミルトニアンは次のように与えられる：</p>

\[H = -J \sum_{i=1}^{N-1} s_i s_{i+1} - h \sum_{i=1}^{N} s_i\]

<p>ここで、\( J \) は隣接スピン間の相互作用定数、\( h \) は一様な外部磁場である。開境界条件のもとで、最初と最後のスピンには周期性を課さない。</p>

<p>この系の分配関数は、次のように定義される：</p>

\[Z_N = \sum_{\{s_i = \pm1\}} \exp\left( \beta J \sum_{i=1}^{N-1} s_i s_{i+1} + \beta h \sum_{i=1}^{N} s_i \right)\]

<p>ここで、\( \beta = 1 / (k_B T) \) は逆温度である。</p>

<h2 id="帰納関係の導出">帰納関係の導出</h2>

<p>この分配関数を帰納的に構築するために、スピン数 \( N \) のときの分配関数 \( Z_N \) を、\( N-1 \) 個のスピンの状態から拡張する形で記述する。</p>

<p>まず、スピン \( s_N \) の取り得る値 \( \pm 1 \) で場合分けして、分配関数を次のように書き分ける：</p>

\[Z_N = \sum_{\{s_1, \dots, s_{N-1}\}} \sum_{s_N = \pm 1}
\exp\left( \beta J \sum_{i=1}^{N-2} s_i s_{i+1} + \beta h \sum_{i=1}^{N-1} s_i \right)
\times \exp\left( \beta J s_{N-1} s_N + \beta h s_N \right)\]

<p>ここで、最初の部分は \( s_N \) に依存しないので、\( Z_{N-1} \) に関係づけることができる。</p>

<p>このとき、分配関数を「最後のスピンの状態」によって分類し、次のように定義する：</p>

<ul>
  <li>\( Z_N^{(+)} \)：スピン数 \( N \) のとき、最後のスピン \( s_N = +1 \) に固定したときの分配関数</li>
  <li>\( Z_N^{(-)} \)：同様に、\( s_N = -1 \) に固定したときの分配関数</li>
</ul>

<p>このとき、以下の再帰関係が得られる：</p>

\[\begin{aligned}
Z_N^{(+)} &amp;= e^{\beta h} \left( Z_{N-1}^{(+)} e^{\beta J} + Z_{N-1}^{(-)} e^{-\beta J} \right) \\
Z_N^{(-)} &amp;= e^{-\beta h} \left( Z_{N-1}^{(+)} e^{-\beta J} + Z_{N-1}^{(-)} e^{\beta J} \right)
\end{aligned}\]

<p>この関係式を用いることで、初期条件から任意の \( N \) に対して分配関数を構築することが可能となる。</p>

<h2 id="初期条件と全体の分配関数">初期条件と全体の分配関数</h2>

<p>最も小さな系、すなわち \( N = 1 \) の場合は、スピンが1つしかないので、状態は2つ（±1）だけである。したがって：</p>

\[Z_1^{(+)} = e^{\beta h}, \quad Z_1^{(-)} = e^{-\beta h}, \quad Z_1 = Z_1^{(+)} + Z_1^{(-)} = 2 \cosh(\beta h)\]

<p>任意の \( N \) に対して、全体の分配関数は次のように求められる：</p>

\[Z_N = Z_N^{(+)} + Z_N^{(-)}\]

<p>このようにして、帰納的な手法により \( Z_N \) を再帰的に計算することができる。</p>

<h2 id="再帰式の行列形式">再帰式の行列形式</h2>

<p>この帰納関係は、ベクトル形式に書き直すと、以下のように<strong>線形代数的な形</strong>になる：</p>

\[\begin{pmatrix}
Z_N^{(+)} \\
Z_N^{(-)}
\end{pmatrix}
=
\begin{pmatrix}
e^{\beta h + \beta J} &amp; e^{\beta h - \beta J} \\
e^{-\beta h - \beta J} &amp; e^{-\beta h + \beta J}
\end{pmatrix}
\begin{pmatrix}
Z_{N-1}^{(+)} \\
Z_{N-1}^{(-)}
\end{pmatrix}\]

<p>これは、いわば伝搬行列法と同じ構造を持っているが、導出の考え方が異なる点が興味深い。</p>

<h2 id="まとめと考察">まとめと考察</h2>

<p>この帰納法的手法は、1次元イジングモデルにおいて、<strong>物理的に自然な構築法</strong>として特に有用である。開境界条件や有限サイズ系において、<strong>逐次的な構築と数値計算</strong>に適しており、外部磁場が存在する場合でも比較的容易に拡張できる。</p>

<p>一方で、周期境界条件や熱力学極限を考慮する場合には、より洗練された方法（例えば伝搬行列法）を併用することが望ましい。</p>]]></content><author><name></name></author><category term="physics" /><category term="1D_Ising" /><summary type="html"><![CDATA[一次元イジングモデルでは、スピン変数 \( s_i = \pm 1 \) が一次元鎖状に並び、隣接スピン間に相互作用がある系を考える。ここでは、周期境界条件ではなく、開境界条件を仮定し、分配関数 \( Z_N \) を帰納的（再帰的）に構築する方法を紹介する。]]></summary></entry><entry><title type="html">1次元イジングモデルの厳密解(1)-転送行列法-</title><link href="http://localhost:4000/physics/2025/05/27/1D_Ising_1.html" rel="alternate" type="text/html" title="1次元イジングモデルの厳密解(1)-転送行列法-" /><published>2025-05-27T21:25:00+09:00</published><updated>2025-05-27T21:25:00+09:00</updated><id>http://localhost:4000/physics/2025/05/27/1D_Ising_1</id><content type="html" xml:base="http://localhost:4000/physics/2025/05/27/1D_Ising_1.html"><![CDATA[<h2 id="-モデルの定義">◆ モデルの定義</h2>

<p>一次元イジングモデル（鎖長 \( N \)）のハミルトニアンは以下のように定義される：</p>

<p>\[
H = -J \sum_{i=1}^{N} s_i s_{i+1} - h \sum_{i=1}^N s_i
\]</p>

<ul>
  <li>\( s_i = \pm 1 \)：各格子点のスピン</li>
  <li>\( J \)：隣接スピン間の相互作用定数</li>
  <li>\( h \)：外部磁場</li>
  <li>周期境界条件：\( s_{N+1} = s_1 \)</li>
</ul>

<h2 id="-分配関数の定義">◆ 分配関数の定義</h2>

<p>分配関数は以下で定義される（\( \beta = 1/k_B T \)）：</p>

<p>\[
Z = \sum_{{s_i = \pm1}} \exp\left( \beta J \sum_{i=1}^{N} s_i s_{i+1} + \beta h \sum_{i=1}^N s_i \right)
\]</p>

<p>この式は、スピンの組み合わせを局所的な指数因子に分解することで、<strong>転送行列法（Transfer Matrix Method）</strong>で解くことができる。</p>

<h2 id="-転送行列の構築">◆ 転送行列の構築</h2>

<p>スピンの組 \( s, s’ \in {+1, -1} \) に対し、転送行列 \( T \) の要素は：</p>

<p>\[
T_{s, s’} = \exp\left( \beta J s s’ + \frac{\beta h}{2}(s + s’) \right)
\]</p>

<p>具体的な2×2行列は以下の通り：
\(\begin{align}
    T = 
        \begin{pmatrix}
            e^{\beta J + \beta h} &amp; e^{-\beta J} \\\\
            e^{-\beta J} &amp; e^{\beta J - \beta h}
        \end{pmatrix}
\end{align}\)
（行・列はそれぞれ \( s = +1, -1 \) の順）</p>

<h2 id="-分配関数の行列表現">◆ 分配関数の行列表現</h2>

<p>周期境界条件のもとでは、分配関数は転送行列の \( N \) 乗のトレースで与えられる：</p>

<p>\[
Z = \mathrm{Tr}(T^N)
\]</p>

<h2 id="-固有値による評価">◆ 固有値による評価</h2>

<p>行列 \( T \) の固有値を \( \lambda_+ &gt; \lambda_- \) とすると：</p>

<p>\[
Z = \lambda_+^N + \lambda_-^N
\]</p>

<p>固有値は以下の式で与えられる：</p>

<p>\[
\lambda_{\pm} = e^{\beta J} \left[ \cosh(\beta h) \pm \sqrt{ \sinh^2(\beta h) + e^{-4 \beta J} } \right]
\]</p>

<h2 id="-自由エネルギー熱力学極限">◆ 自由エネルギー（熱力学極限）</h2>

<p>熱力学極限 \( N \to \infty \) において、自由エネルギー密度 \( f \) は：</p>

<p>\[
f = -\frac{1}{\beta} \lim_{N \to \infty} \frac{1}{N} \ln Z = -\frac{1}{\beta} \ln \lambda_+
\]</p>]]></content><author><name></name></author><category term="physics" /><category term="1D_Ising" /><summary type="html"><![CDATA[◆ モデルの定義]]></summary></entry><entry><title type="html">数式のテスト</title><link href="http://localhost:4000/general/2025/05/24/math-test.html" rel="alternate" type="text/html" title="数式のテスト" /><published>2025-05-24T21:00:00+09:00</published><updated>2025-05-24T21:00:00+09:00</updated><id>http://localhost:4000/general/2025/05/24/math-test</id><content type="html" xml:base="http://localhost:4000/general/2025/05/24/math-test.html"><![CDATA[<p>これはインライン数式のテストです。例えば、アインシュタインの有名な式は $E=mc^2$ です。
また、円周率を $\pi$ と書くこともできます。</p>

<p>これは別行立てのディスプレイ数式のテストです：</p>

\[\sum_{n=1}^{\infty} \frac{1}{n^2} = \frac{\pi^2}{6}\]

<p>三角関数の重要な公式：
\[ \sin^2\theta + \cos^2\theta = 1 \]</p>

<p>Markdown との競合を避けるため、特にアンダースコア <code class="language-plaintext highlighter-rouge">_</code> やアスタリスク <code class="language-plaintext highlighter-rouge">*</code> を LaTeX のコマンド（添え字など）で使う場合は、数式全体を <code class="language-plaintext highlighter-rouge">$</code> や <code class="language-plaintext highlighter-rouge">$$</code> で囲んだ上で、Markdown のパーサーに解釈されないように注意が必要な場合があります。多くの場合、MathJax がうまく処理してくれます。</p>]]></content><author><name></name></author><category term="general" /><category term="test" /><summary type="html"><![CDATA[これはインライン数式のテストです。例えば、アインシュタインの有名な式は $E=mc^2$ です。 また、円周率を $\pi$ と書くこともできます。]]></summary></entry><entry><title type="html">最初の投稿です！</title><link href="http://localhost:4000/general/2025/05/24/my-first-post.html" rel="alternate" type="text/html" title="最初の投稿です！" /><published>2025-05-24T20:30:00+09:00</published><updated>2025-05-24T20:30:00+09:00</updated><id>http://localhost:4000/general/2025/05/24/my-first-post</id><content type="html" xml:base="http://localhost:4000/general/2025/05/24/my-first-post.html"><![CDATA[<p>こんにちは！これは私の最初のブログ投稿です。</p>

<p>Jekyll と GitHub Pages を使ってブログを始めることができました。
これから、学んだことや考えたことをここに書き留めていこうと思います。</p>

<h2 id="markdown-も使えます">Markdown も使えます</h2>

<ul>
  <li>リストも</li>
  <li>簡単です</li>
</ul>

<p>よろしくお願いします！</p>]]></content><author><name></name></author><category term="general" /><category term="test" /><summary type="html"><![CDATA[こんにちは！これは私の最初のブログ投稿です。]]></summary></entry></feed>